<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
		
	
	<context:annotation-config/>
	<context:component-scan base-package="com.hwan.proc.dao"/>	
	<context:component-scan base-package="com.hwan.proc.service"/>	
	
		
	<bean id="ds" class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
		<property name="driverClass" value="com.mysql.cj.jdbc.Driver"/>
		<property name="url" value="jdbc:mysql://127.0.0.1:3306/test1023?serverTimezone=UTC&amp;useUniCode=yes&amp;characterEncoding=UTF-8"/>
		<property name="username" value="ssafy"/>
		<property name="password" value="ssafy"/>
	</bean>	
	
	<bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="ds"/>
		<!-- DTO를 클래스 이름으로 Alias로 사용할 수 있도록   DTO 패키지를 설정 -->
		<property name="typeAliasesPackage"		value="com.hwan.proc.dto"/>
		<!-- Mapper 지정  
		     ==> spring을 통해 DAO의 구현(Imp)를 자동으로 생성하기 위해서는   Mapper의 위치가 DAO 인터페이스와 동일해야 한다.  
		 -->
		 <property name="mapperLocations"		value="classpath:com/hwan/proc/dao/*.xml"/>
	</bean>
	
	<bean id='sqlSession'		class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref='sqlSessionFactoryBean'/>
	</bean>
	
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="ds" />
	</bean>
	
	
	
	<tx:annotation-driven transaction-manager="transactionManager"/>
		
	<!-- spring이 DAO 인터페이스의 구현부를 자동으로 생성하기 위해   Mapper가 있는 package를 scan -->	
	<bean id="config"		class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		 <!--DAO 가 있는 package 설정 -->
		<property name="basePackage" value="com.hwan.proc.dao"/>		
	</bean>
	
		<!-- Aspect를 bean으로 등록한다. -->
	<bean id='helloAop'			class="com.hwan.proc.aop.HelloAop"/>
	<bean id='timeAop'			class="com.hwan.proc.aop.TimeAop"/>
	
	
	
	<!-- aop 설정
		1. aop를 위한 namespace 추가 하기 
		2. <aop:config></aop:config> 태그로 aop 설정 
	 -->
	 <aop:config>
	 	<!--
	 	    <aop:pointcut/>  태그로 pointcut을 설정하면 여러 Aspect에서 재사용할 수 있다. 
	 		expression="execution(aspectj 표현식)"
	 		id ='식별 가능한 이름'
	 	 -->
	 	<aop:pointcut 	expression="execution( * com.hwan.proc.service.*Service.select(..))" 
	 					id="searchPC"/>
	 					
		<!--
			<aop:aspect></aop:aspect>  태그로 aspect 지정 
			   ref : aspect로 사용할 bean의 id
		  --> 					
	 	<aop:aspect  ref='helloAop'>
	 		<!--  Advice 설정  
	 			<aop:시점   />
	 			 method='공통모듈 메서드 이름'
	 			 pointcut='지정한 시점에서 사용할 aspectj 표현식 , 재사용이 안됨'		
	 			 pointcut-ref='미리 등록한 pointcut의 id'
	 		-->
	 		<aop:before method="hello"		pointcut-ref="searchPC"/>
	 	</aop:aspect>			
	 	
	 	<aop:aspect	ref='timeAop'>
	 		<aop:around method="calc"		pointcut-ref="searchPC"/>
	 	</aop:aspect>	
	 </aop:config>
	
</beans>










